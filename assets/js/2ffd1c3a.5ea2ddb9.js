"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"5. \u270f\ufe0f PRACTICE: Git Project Setup",id:"practice_git_project_setup",slug:"practice_git_project_setup",hide_table_of_contents:!0,sidebar_position:7,day:"monday",type:"exercise"},i=void 0,l={unversionedId:"git_html_and_css/practice_git_project_setup",id:"git_html_and_css/practice_git_project_setup",title:"5. \u270f\ufe0f PRACTICE: Git Project Setup",description:"Goal: In this lesson, we'll create a one-page website that says \"hello\" to the world. In the process, we'll learn about Git, a tool for tracking changes to our code. The steps we follow in this lesson will reflect the daily workflow we'll use when coding all of our projects throughout our time at Epicodus. You can also use the cheat sheet as a reference for starting your projects during this section \u2014 but using Git for your projects will soon become second nature.",source:"@site/docs/1_git_html_and_css/1c_classwork_practice_git_project_setup.md",sourceDirName:"1_git_html_and_css",slug:"/git_html_and_css/practice_git_project_setup",permalink:"/lhtp/git_html_and_css/practice_git_project_setup",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"5. \u270f\ufe0f PRACTICE: Git Project Setup",id:"practice_git_project_setup",slug:"practice_git_project_setup",hide_table_of_contents:!0,sidebar_position:7,day:"monday",type:"exercise"},sidebar:"docs",previous:{title:"4. \ud83d\udcd3 Pair Programming and Using Discord when Practicing the Git Workflow",permalink:"/lhtp/git_html_and_css/pair_programming_and_using_discord_when_practicing_the_git_workflow"},next:{title:"6. \u270f\ufe0f PRACTICE: Tracking Changes with Git",permalink:"/lhtp/git_html_and_css/practice_tracking_changes_with_git"}},s={},c=[{value:"Configuring Your Git Name and Email",id:"configuring-your-git-name-and-email",level:2},{value:"On Personal Machines",id:"on-personal-machines",level:3},{value:"On Campus on Shared Computers",id:"on-campus-on-shared-computers",level:3},{value:"Getting Authorship on Shared Projects \u2014 On Campus or Remote",id:"getting-authorship-on-shared-projects--on-campus-or-remote",level:3},{value:"Starting a New Project",id:"starting-a-new-project",level:2},{value:"Creating a Project Directory",id:"creating-a-project-directory",level:2},{value:"Initializing Git",id:"initializing-git",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Goal"),": In this lesson, we'll create a one-page website that says \"hello\" to the world. In the process, we'll learn about Git, a tool for tracking changes to our code. The steps we follow in this lesson will reflect the daily workflow we'll use when coding all of our projects throughout our time at Epicodus. You can also use the cheat sheet as a reference for starting your projects during this section \u2014 but using Git for your projects will soon become second nature."),(0,o.kt)("h2",{id:"configuring-your-git-name-and-email"},"Configuring Your Git Name and Email"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"on-personal-machines"},"On Personal Machines"),(0,o.kt)("p",null,"In order to save code using the Git version control system, Git needs to have our name and email. On our personal machines, we can do this just ",(0,o.kt)("strong",{parentName:"p"},"once")," with a ",(0,o.kt)("strong",{parentName:"p"},"global")," configuration in the terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ git config --global user.name "Padma Patil"\n$ git config --global user.email padma@email.com\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"global")," configuration sets a configuration ",(0,o.kt)("em",{parentName:"p"},"everywhere")," on a machine \u2014 not just in one directory or file. When we create a configuration for just one project directory on a machine, it's called a ",(0,o.kt)("strong",{parentName:"p"},"local")," configuration. "),(0,o.kt)("h3",{id:"on-campus-on-shared-computers"},"On Campus on Shared Computers"),(0,o.kt)("p",null,"However, even on the shared computers on campus at Epicodus, we won't use local Git configurations. Instead, at the beginning of each class session ",(0,o.kt)("strong",{parentName:"p"},"one")," student in a pair will set up ",(0,o.kt)("strong",{parentName:"p"},"global")," Git credentials. The instructions on how to do this are the same as above. Note that these global Git credentials will be wiped when students shut down the computers at the end of every work day."),(0,o.kt)("p",null,"Later on, the same student who set up the global Git credentials will use other Git commands to save the local project on their remote GitHub account. Then, the other student(s) in the pair will copy that project, saving it to their own remote GitHub account. We'll go over this workflow in detail when we are ready for this step."),(0,o.kt)("h3",{id:"getting-authorship-on-shared-projects--on-campus-or-remote"},"Getting Authorship on Shared Projects \u2014 On Campus or Remote"),(0,o.kt)("p",null,"We pair program at Epicodus, which means there are always multiple authors for one project. To give credit to all the authors on a project, we use Git's built-in tool called ",(0,o.kt)("strong",{parentName:"p"},"commit trailers"),". We'll learn about commit trailers later on when we start making ",(0,o.kt)("strong",{parentName:"p"},"commits"),". However, we're not ready for this step \u2014 we're still working on setting up our first project!"),(0,o.kt)("h2",{id:"starting-a-new-project"},"Starting a New Project"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Whenever we start a new project, we create a new project directory."),(0,o.kt)("p",null,"At Epicodus, we generally create new projects on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Desktop")," directory. However, you may want to create a new directory on your personal machine for storing projects as well."),(0,o.kt)("p",null,"If we open the terminal and enter ",(0,o.kt)("inlineCode",{parentName:"p"},"ls"),", we'll see a list of the files and directories that in our home directory. Chances are, you won't want to store your newly-created projects in the home directory."),(0,o.kt)("h2",{id:"creating-a-project-directory"},"Creating a Project Directory"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Instead, we'll want to navigate to the Desktop directory for easy access. Let's change directories from our home directory into our Desktop using the ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd Desktop\n")),(0,o.kt)("p",null,"You can create a new project here, or, if you prefer, create a new directory where your projects will be stored and then ",(0,o.kt)("inlineCode",{parentName:"p"},"$ cd")," into that directory."),(0,o.kt)("p",null,"Next, we'll create a project directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ mkdir hello-world\n")),(0,o.kt)("p",null,"Remember, ",(0,o.kt)("inlineCode",{parentName:"p"},"mkdir")," is short for ",(0,o.kt)("em",{parentName:"p"},"make directory"),"."),(0,o.kt)("p",null,"We can run the ",(0,o.kt)("inlineCode",{parentName:"p"},"ls")," command to see that ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," has been added to the list of directories on our Desktop (or wherever you've chosen to create your new directory)."),(0,o.kt)("p",null,"Next, we'll move into the ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd hello-world\n")),(0,o.kt)("p",null,"To confirm that we're in the correct directory, we can check our location with a ",(0,o.kt)("inlineCode",{parentName:"p"},"pwd"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ pwd\n")),(0,o.kt)("h2",{id:"initializing-git"},"Initializing Git"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Before we start writing any code, we'll create a Git directory within our project directory that will track everything we add, modify and delete within this directory."),(0,o.kt)("p",null,"We do this by ",(0,o.kt)("strong",{parentName:"p"},"initializing")," a new Git repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ git init\nInitialized empty Git repository in /Users/staff/Desktop/hello-world/.git/\n")),(0,o.kt)("p",null,"If we run ",(0,o.kt)("inlineCode",{parentName:"p"},"ls"),", though, we won't see the new directory. Why not? "),(0,o.kt)("p",null,"Well, if you take a look at the terminal's response to our ",(0,o.kt)("inlineCode",{parentName:"p"},"$ git init")," command, you'll see that the following file was initialized:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Initialized empty Git repository in /Users/staff/Desktop/hello-world/.git/\n")),(0,o.kt)("p",null,"Note that the exact ",(0,o.kt)("strong",{parentName:"p"},"path"),", the list of all the directories we'd need to navigate through to get to ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world"),", will be different on your personal machine."),(0,o.kt)("p",null,"Next, note the name of the file that was created inside ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},".git\n")),(0,o.kt)("p",null,"Whenever a file has a period in front of the name, it will be ",(0,o.kt)("strong",{parentName:"p"},"hidden"),". That means they won't appear when we run the ",(0,o.kt)("inlineCode",{parentName:"p"},"ls")," command. They also won't show up if we navigate to the directory using the point-and-click interface in the GUI (graphical user interface) of our computer."),(0,o.kt)("p",null,"If we want to see hidden files in the terminal, we need to add a modifier to our ",(0,o.kt)("inlineCode",{parentName:"p"},"ls")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ ls -a\n.git\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"-a")," stands for ",(0,o.kt)("em",{parentName:"p"},"all"),", so ",(0,o.kt)("inlineCode",{parentName:"p"},"$ ls -a")," means list ",(0,o.kt)("em",{parentName:"p"},"all")," files, even hidden ones. Modifiers added to terminal commands are also known as ",(0,o.kt)("strong",{parentName:"p"},"flags"),". There are many flags we can use to modify terminal commands."),(0,o.kt)("p",null,"To see all files on a Windows machine, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"> ls -force\n")),(0,o.kt)("p",null,"We'll see that the ",(0,o.kt)("inlineCode",{parentName:"p"},".git")," directory has been created in our ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-world")," directory. Let's ",(0,o.kt)("inlineCode",{parentName:"p"},"cd")," into this directory and take a quick peek at its contents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd .git\n$ ls\nHEAD        description info        refs\nconfig      hooks       objects\n")),(0,o.kt)("p",null,"These are all the files Git uses to track our project and we don't need to worry about ",(0,o.kt)("em",{parentName:"p"},"any")," of them. In fact, we should never modify the ",(0,o.kt)("inlineCode",{parentName:"p"},".git")," folder because Git will take care of all tracking automatically. In general, it's common for files and directories that shouldn't be modified to be hidden \u2014 that ensures we don't accidentally modify them."),(0,o.kt)("p",null,"As we add, update and delete files, Git will be in the background, automatically making notes of every change in our project directory."),(0,o.kt)("p",null,"Let's return to the top level of our project directory by changing directories and moving up one level:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd ..\n")),(0,o.kt)("p",null,'Now, we are ready to add a new file to our project.  This will be the HTML page that will say "Hello" to the world.'))}u.isMDXComponent=!0}}]);