"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[63426],{30876:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,g=u["".concat(o,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(g,l(l({ref:t},c),{},{components:a})):n.createElement(g,l({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},52552:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7896),r=(a(2784),a(30876));const i={title:"ES6 Template Literals",id:"es6-template-literals",slug:"es6-template-literals",hide_table_of_contents:!0,sidebar_position:3,day:"monday",type:"lesson",url:"https://github.com/epicodus-curriculum/javascript-full-stack/blob/main/2e_template_literals_in_es6.md"},l=void 0,s={unversionedId:"intermediate-javascript/test-driven-development-part-2/es6-template-literals",id:"intermediate-javascript/test-driven-development-part-2/es6-template-literals",title:"ES6 Template Literals",description:"Template literals are a spoonful of syntactic sugar and another popular feature in ES6. They're especially useful when concatenating strings or inserting variables into strings.",source:"@site/docs/intermediate-javascript/6_test-driven-development-part-2/2e-template-literals-in-es6.md",sourceDirName:"intermediate-javascript/6_test-driven-development-part-2",slug:"/intermediate-javascript/test-driven-development-part-2/es6-template-literals",permalink:"/intermediate-javascript/test-driven-development-part-2/es6-template-literals",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"ES6 Template Literals",id:"es6-template-literals",slug:"es6-template-literals",hide_table_of_contents:!0,sidebar_position:3,day:"monday",type:"lesson",url:"https://github.com/epicodus-curriculum/javascript-full-stack/blob/main/2e_template_literals_in_es6.md"},sidebar:"intermediate-javascript",previous:{title:"ES6 Arrow Notation",permalink:"/intermediate-javascript/test-driven-development-part-2/es6-arrow-notation"},next:{title:"Working with Multiple Files",permalink:"/intermediate-javascript/test-driven-development-part-2/working-with-multiple-files"}},o={},p=[{value:"Template Literals",id:"template-literals",level:2},{value:"Using Template Literals for Expressions",id:"using-template-literals-for-expressions",level:3},{value:"Creating Multi-Line Strings",id:"creating-multi-line-strings",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Template literals are a spoonful of syntactic sugar and another popular feature in ES6. They're especially useful when concatenating strings or inserting variables into strings."),(0,r.kt)("p",null,"A lot of other languages have this same feature, too. For example, template literals are called string interpolation in both Ruby and C#. It's also a lot easier to use than concatenation, especially with longer strings. "),(0,r.kt)("h2",{id:"template-literals"},"Template Literals"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Here's an example of how we'd insert a variable into a string prior to ES6. (In the following example, ignore the fact that we wouldn't use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," prior to ES6.)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let language = "JavaScript";\nlet adjective = "fun";\n\nlet concatenatedString = language + " is " + adjective + " to learn!";\n')),(0,r.kt)("p",null,"String concatenation is useful but it quickly becomes painful. We can make this process relatively painless using template literals. Here's an example using the same variables from above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let stringLiteral = `${language} is ${adjective} to learn!`;\n")),(0,r.kt)("p",null,"There are two syntax rules to remember with template literals:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"First, we need to surround the string with the backtick symbol instead of quotes. "),(0,r.kt)("li",{parentName:"ol"},"Second, any variable or expression needs to be put inside of ",(0,r.kt)("inlineCode",{parentName:"li"},"${ }"),".")),(0,r.kt)("h3",{id:"using-template-literals-for-expressions"},"Using Template Literals for Expressions"),(0,r.kt)("p",null,"Note that template literals ",(0,r.kt)("inlineCode",{parentName:"p"},"${ }")," can contain any expression, not just a variable. For instance, we could do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let length = 2;\nlet width = 3;\nlet rectangleArea = `The area of a rectangle with length ${length} and width ${width} is ${length * width}.`;\n")),(0,r.kt)("p",null,"In the example above, we're calculating ",(0,r.kt)("inlineCode",{parentName:"p"},"length * width")," inside the template literal. We can compute any JS code inside a template literal as long as it's inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"${}"),". Keep in mind that while you ",(0,r.kt)("em",{parentName:"p"},"can")," do this, you probably ",(0,r.kt)("em",{parentName:"p"},"shouldn't"),", since it could quickly make your code less readable."),(0,r.kt)("h3",{id:"creating-multi-line-strings"},"Creating Multi-Line Strings"),(0,r.kt)("p",null,"One last thing. Backticks can be used to create multi-line strings. It's unlikely you'll need this functionality much, but it's still good to know. Here's an example to try out in the DevTools console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"> const multiLineString = `This is not a good\nhaiku about JavaScript code:\ntemplate literals.`;\n> console.log(multiLineString);\nThis is not a good\nhaiku about JavaScript code:\ntemplate literals.\n")),(0,r.kt)("p",null,"If we don't print ",(0,r.kt)("inlineCode",{parentName:"p"},"multiLineString")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log()"),", we'll see our line breaks are preserved by the new line character ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"'This is not a good\\nhaiku about JavaScript code:\\ntemplate literals.'\n")),(0,r.kt)("p",null,"To see more examples, visit ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"},"the MDN documentation on template literals"),"."))}m.isMDXComponent=!0}}]);