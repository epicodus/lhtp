"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[33547],{30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,m=c["".concat(s,".").concat(u)]||c[u]||h[u]||a;return n?o.createElement(m,r(r({ref:t},d),{},{components:n})):o.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6252:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7896),i=(n(2784),n(30876));const a={title:"Loops and Conditionals with Razor",id:"loops-and-conditionals-with-razor",slug:"loops-and-conditionals-with-razor",hide_table_of_contents:!0,sidebar_position:28,day:"tuesday",type:"lesson",url:"https://github.com/epicodus-curriculum/c-sharp-full-stack/blob/main/1f_loops_and_conditionals_with_razor.md"},r=void 0,l={unversionedId:"c-and-net/basic-web-applications/loops-and-conditionals-with-razor",id:"c-and-net/basic-web-applications/loops-and-conditionals-with-razor",title:"Loops and Conditionals with Razor",description:"In the last lesson, we updated our controller code to return a List of Items. In this lesson, we're ready to update our view to properly display that List. In the process, we'll cover adding loops and conditionals to a view.",source:"@site/docs/c-and-net/8_basic-web-applications/1f-loops-and-conditionals-with-razor.md",sourceDirName:"c-and-net/8_basic-web-applications",slug:"/c-and-net/basic-web-applications/loops-and-conditionals-with-razor",permalink:"/c-and-net/basic-web-applications/loops-and-conditionals-with-razor",draft:!1,tags:[],version:"current",sidebarPosition:28,frontMatter:{title:"Loops and Conditionals with Razor",id:"loops-and-conditionals-with-razor",slug:"loops-and-conditionals-with-razor",hide_table_of_contents:!0,sidebar_position:28,day:"tuesday",type:"lesson",url:"https://github.com/epicodus-curriculum/c-sharp-full-stack/blob/main/1f_loops_and_conditionals_with_razor.md"},sidebar:"c-and-net",previous:{title:"Lists and Redirects in a Controller",permalink:"/c-and-net/basic-web-applications/lists-and-redirects-in-a-controller"},next:{title:"Multiple Controllers",permalink:"/c-and-net/basic-web-applications/multiple-controllers"}},s={},p=[{value:"Adding a <code>foreach</code> Loop",id:"adding-a-foreach-loop",level:2},{value:"Adding a Conditional",id:"adding-a-conditional",level:2},{value:"Repository Reference",id:"repository-reference",level:3}],d={toc:p},c="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the last lesson, we updated our controller code to return a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"Item"),"s. In this lesson, we're ready to update our view to properly display that ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),". In the process, we'll cover adding loops and conditionals to a view."),(0,i.kt)("h2",{id:"adding-a-foreach-loop"},"Adding a ",(0,i.kt)("inlineCode",{parentName:"h2"},"foreach")," Loop"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Let's start by updating our ",(0,i.kt)("inlineCode",{parentName:"p"},"Index.cshtml")," so it can loop through ",(0,i.kt)("inlineCode",{parentName:"p"},"Item"),"s. We'll use Razor markup syntax to write a standard C# ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," loop within the HTML."),(0,i.kt)("div",{class:"filename"},"Views/Home/Index.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>My To-Do List!</title>\n    <link \n      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" \n      rel="stylesheet" \n      integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" \n      crossorigin="anonymous">\n  </head>\n  <body>\n    @using ToDoList.Models;\n\n    <h1>To Do List</h1>\n    <ul>\n      @foreach (Item item in Model)\n      {\n        <li>@item.Description</li>\n      }\n\n    </ul>\n    <a href="/items/new">Add a new item.</a>\n  </body>\n</html>\n')),(0,i.kt)("p",null,"We start with ",(0,i.kt)("strong",{parentName:"p"},"a ",(0,i.kt)("inlineCode",{parentName:"strong"},"using")," directive"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"@using ToDoList.Models;"),". We can include using directives in views as long as they are prefaced with the usual ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," to transition from HTML to C#. We will go over why we are using this in a moment."),(0,i.kt)("p",null,"Next, we put a ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," loop inside an unordered list. We specify that we will loop through each ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Item")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Model"),". Within the ",(0,i.kt)("inlineCode",{parentName:"p"},"@foreach")," statement, we wrap each ",(0,i.kt)("inlineCode",{parentName:"p"},"item"),"s ",(0,i.kt)("inlineCode",{parentName:"p"},"Description")," in an ",(0,i.kt)("inlineCode",{parentName:"p"},"li")," tag."),(0,i.kt)("p",null,"Note that we need the ",(0,i.kt)("inlineCode",{parentName:"p"},"using")," directive so we can declare that ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Item")," without having to list the namespace explicitly when we reference the ",(0,i.kt)("inlineCode",{parentName:"p"},"Item")," class in the ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"...\n  @foreach (Item item in Model)\n...\n")),(0,i.kt)("p",null,"If we did not include the ",(0,i.kt)("inlineCode",{parentName:"p"},"@using ToDoList.Models;")," directive, we would have to list out the namespace for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Item")," class explicitly, like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"...\n  @foreach (ToDoList.Models.Item item in Model)\n...\n")),(0,i.kt)("p",null,"In the end, this ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach")," loop looks exactly like any other C# loop other than the fact that we use ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," to intersperse C# with HTML elements."),(0,i.kt)("h2",{id:"adding-a-conditional"},"Adding a Conditional"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Let's add a conditional to handle delivering a message to the user when there are no items in the list yet."),(0,i.kt)("div",{class:"filename"},"Views/Home/Index.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"...\n<h1>To Do List</h1>\n\n@if (Model.Count == 0)\n{\n  <p>There are no items in the list.</p>\n}\n<ul>\n  @foreach (Item item in Model)\n  {\n    <li>@item.Description</li>\n  }\n</ul>\n...\n")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"Model.Count == 0"),", our conditional lets the user know the list has no items. Otherwise, it will loop through the list."),(0,i.kt)("h3",{id:"repository-reference"},"Repository Reference"),(0,i.kt)("p",null,"Follow the link below to view how a sample version of the project should look at this point. Note that this is a link to a specific branch in the repository."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/epicodus-lessons/section-2-to-do-list-csharp-net6/tree/3_list_redirects_loops_and_conditionals"},(0,i.kt)("i",{class:"glyphicon glyphicon-folder-open"})," Example GitHub Repo for To Do List: 3","_","list","_","redirects","_","loops","_","and","_","conditionals"))))}h.isMDXComponent=!0}}]);