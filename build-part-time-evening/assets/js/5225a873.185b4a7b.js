"use strict";(self.webpackChunklhtp=self.webpackChunklhtp||[]).push([[45914],{30876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(7896),i=(n(2784),n(30876));const o={title:"Many-to-Many Create Functionality",id:"many-to-many-create-functionality",slug:"many-to-many-create-functionality",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/c-sharp-full-stack/blob/main/0e_create_with_many_to_many.md"},l=void 0,r={unversionedId:"c-and-net/many-to-many-relationships/many-to-many-create-functionality",id:"c-and-net/many-to-many-relationships/many-to-many-create-functionality",title:"Many-to-Many Create Functionality",description:"In the last lesson, we added read functionality for our new Tag class. In this lesson, we'll add create functionality in order to make new tags. We'll also add routes and views to make it possible to create a many-to-many association between tags and items from both the TagsController and ItemsController.",source:"@site/docs/c-and-net/12_many-to-many-relationships/0e-create-with-many-to-many.md",sourceDirName:"c-and-net/12_many-to-many-relationships",slug:"/c-and-net/many-to-many-relationships/many-to-many-create-functionality",permalink:"/c-and-net/many-to-many-relationships/many-to-many-create-functionality",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Many-to-Many Create Functionality",id:"many-to-many-create-functionality",slug:"many-to-many-create-functionality",hide_table_of_contents:!0,sidebar_position:6,day:"weekend",type:"lesson",url:"https://github.com/epicodus-curriculum/c-sharp-full-stack/blob/main/0e_create_with_many_to_many.md"},sidebar:"c-and-net",previous:{title:"Many-to-Many Read Functionality",permalink:"/c-and-net/many-to-many-relationships/many-to-many-read-functionality"},next:{title:"Many-to-Many Update Functionality",permalink:"/c-and-net/many-to-many-relationships/many-to-many-update-functionality"}},s={},d=[{value:"CREATE: Adding <code>Create()</code> Actions to the <code>TagsController</code> and Corresponding View",id:"create-adding-create-actions-to-the-tagscontroller-and-corresponding-view",level:2},{value:"CREATE: Adding <code>AddItem()</code> Actions to the <code>TagsController</code> and Corresponding View",id:"create-adding-additem-actions-to-the-tagscontroller-and-corresponding-view",level:2},{value:"CREATE: Adding <code>AddTag()</code> Actions to the <code>ItemsController</code> and Corresponding View",id:"create-adding-addtag-actions-to-the-itemscontroller-and-corresponding-view",level:2},{value:"Repository Reference",id:"repository-reference",level:3}],c={toc:d},m="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the last lesson, we added read functionality for our new ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," class. In this lesson, we'll add create functionality in order to make new tags. We'll also add routes and views to make it possible to create a many-to-many association between tags and items from both the ",(0,i.kt)("inlineCode",{parentName:"p"},"TagsController")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsController"),"."),(0,i.kt)("h2",{id:"create-adding-create-actions-to-the-tagscontroller-and-corresponding-view"},"CREATE: Adding ",(0,i.kt)("inlineCode",{parentName:"h2"},"Create()")," Actions to the ",(0,i.kt)("inlineCode",{parentName:"h2"},"TagsController")," and Corresponding View"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"We'll start by adding the ability to create tags. Let's start by adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"Create()")," GET and POST actions to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TagsController"),"."),(0,i.kt)("p",null,"Here's the code that we'll add:"),(0,i.kt)("div",{class:"filename"},"Controllers/TagsController.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n\n    public ActionResult Create()\n    {\n      return View();\n    }\n\n    [HttpPost]\n    public ActionResult Create(Tag tag)\n    {\n      _db.Tags.Add(tag);\n      _db.SaveChanges();\n      return RedirectToAction("Index");\n    }\n\n...\n')),(0,i.kt)("p",null,"The above code should look familiar from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Create()")," actions we've added to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsController")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"CategoriesController"),". "),(0,i.kt)("p",null,"Next, let's add a view for our ",(0,i.kt)("inlineCode",{parentName:"p"},"Create()")," action. Create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"Create.cshtml")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Views/Tags/")," subdirectory and add the following code:"),(0,i.kt)("div",{class:"filename"},"Views/Tags/Create.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'@{\n  Layout = "_Layout";\n}\n\n@model ToDoList.Models.Tag\n\n<h4>Add a new tag</h4>\n\n@using (Html.BeginForm())\n{\n    @Html.LabelFor(model => model.Title)\n    @Html.TextBoxFor(model => model.Title)\n\n    <input type="submit" value="Add new tag" class="btn btn-primary" />\n}\n<p>@Html.ActionLink("Show all tags", "Index")</p>\n')),(0,i.kt)("p",null,"Note that we are not adding the ability to create a many-to-many association between items and tags to the tag's create page. These two creation actions should be separate. In other words, we should be able to create a tag without needing to also create a many-to-many association with an item."),(0,i.kt)("p",null,"Let's finish up by adding a link to our new ",(0,i.kt)("inlineCode",{parentName:"p"},"Create")," route to our tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"Index.cshtml"),":"),(0,i.kt)("div",{class:"filename"},"Views/Tags/Index.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n<p>@Html.ActionLink("Add new tag", "Create")</p>\n')),(0,i.kt)("h2",{id:"create-adding-additem-actions-to-the-tagscontroller-and-corresponding-view"},"CREATE: Adding ",(0,i.kt)("inlineCode",{parentName:"h2"},"AddItem()")," Actions to the ",(0,i.kt)("inlineCode",{parentName:"h2"},"TagsController")," and Corresponding View"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Next, let's add the ability to create many-to-many associations between tags and items. To do this, we'll add new ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem()")," GET and POST actions and a corresponding view. "),(0,i.kt)("p",null,"Let's start by adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"TagsController")," actions. Here's the code we'll add:"),(0,i.kt)("div",{class:"filename"},"Controllers/TagsController.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n\n    public ActionResult AddItem(int id)\n    {\n      Tag thisTag = _db.Tags.FirstOrDefault(tags => tags.TagId == id);\n      ViewBag.ItemId = new SelectList(_db.Items, "ItemId", "Description");\n      return View(thisTag);\n    }\n\n    [HttpPost]\n    public ActionResult AddItem(Tag tag, int itemId)\n    {\n      #nullable enable\n      ItemTag? joinEntity = _db.ItemTags.FirstOrDefault(join => (join.ItemId == itemId && join.TagId == tag.TagId));\n      #nullable disable\n      if (joinEntity == null && itemId != 0)\n      {\n        _db.ItemTags.Add(new ItemTag() { ItemId = itemId, TagId = tag.TagId });\n        _db.SaveChanges();\n      }\n      return RedirectToAction("Details", new { id = tag.TagId });\n    }\n\n...\n')),(0,i.kt)("p",null,"The code in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem()")," GET action should be familiar: we get the tag that we want to associate with an item along with a list of all items and pass each into the view."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem()")," POST action contains some new code to ensure that we don't create a join relationship in two scenarios: when there's no item in the select list with which to create a join relationship, and when a join relationship between a tag and item already exists. If either of these scenarios are true, that means we don't want to create a new join relationship and we simply route back to the details page."),(0,i.kt)("p",null,"For the first scenario, to prevent the creation of a join relationship when there's no item in the select list, all we need to do is double check the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"itemId"),": if it's equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", there's no item in the select list with which to create a join relationship. We do this in the if statement with the condition ",(0,i.kt)("inlineCode",{parentName:"p"},"itemId != 0"),"."),(0,i.kt)("p",null,"For the second scenario, to prevent creating duplicate join relationships we need to go through a process of checking whether the join relationship already exists. This is where the new code comes in:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"      #nullable enable\n      ItemTag? joinEntity = _db.ItemTags.FirstOrDefault(join => (join.ItemId == itemId && join.TagId == tag.TagId));\n      #nullable disable\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We create a database query with the ",(0,i.kt)("inlineCode",{parentName:"li"},"FirstOrDefault()")," method that returns the first ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemTag")," object that contains a matching ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemId")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"TagId"),"; if a matching ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemTag")," object can't be found, the default is returned, which is ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),". "),(0,i.kt)("li",{parentName:"ul"},"Since our ",(0,i.kt)("inlineCode",{parentName:"li"},"joinEntity")," variable will be either an ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemTag")," object or ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", we need to make it a nullable type. We can turn a type into a ",(0,i.kt)("strong",{parentName:"li"},"nullable type")," by adding a question mark ",(0,i.kt)("inlineCode",{parentName:"li"},"?")," at the end of the type, like ",(0,i.kt)("inlineCode",{parentName:"li"},"ItemTag?"),"."),(0,i.kt)("li",{parentName:"ul"},"To use nullable reference types in particular, we must also have a nullable annotation context enabled so that our C# compiler can process the nullable reference types. We can enable a nullable annotation context for our entire app via our ",(0,i.kt)("inlineCode",{parentName:"li"},".csproj")," file, or for a file or a few lines of code with nullable directives: ",(0,i.kt)("inlineCode",{parentName:"li"},"#nullable enable")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"#nullable disable"),". We're opting for the latter in our code because it will require less refactoring across our whole app."),(0,i.kt)("li",{parentName:"ul"},"To complete the checking process for duplicate join relationships, we simply need to check if ",(0,i.kt)("inlineCode",{parentName:"li"},"joinEntity == null")," in our conditional. If the result of our search for duplicates is ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", it means that we can move forward with creating the new join relationship in our database.")),(0,i.kt)("p",null,"To review more information about nullable types, start with the LearnHowToProgram.com lesson on ",(0,i.kt)("a",{parentName:"p",href:"https://new.learnhowtoprogram.com/c-and-net/test-driven-development-with-c/nullable-types"},"Nullable Types"),". "),(0,i.kt)("p",null,"Note that we can also check if a join relationship has already been saved to the database using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Enumerable.Contains()")," method and a custom equality comparer. To learn how to do this, visit ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.contains?view=net-6.0#system-linq-enumerable-contains-1(system-collections-generic-ienumerable((-0))-0-system-collections-generic-iequalitycomparer((-0)))"},"this section of the ",(0,i.kt)("inlineCode",{parentName:"a"},"Enumerable.Contains()")," docs"),"."),(0,i.kt)("p",null,"Next, let's add our ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem.cshtml")," view. Go ahead and create this file now within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Views/Tags")," subdirectory and add the following code:"),(0,i.kt)("div",{class:"filename"},"Views/Tags/AddItem.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'@{\n  Layout = "_Layout";\n}\n\n@model ToDoList.Models.Tag\n\n<h2>Add an item</h2>\n\n<h4>Add an item to this tag: @Html.DisplayFor(model => model.Title)</h4>\n\n@using (Html.BeginForm())\n{\n    @Html.HiddenFor(model => model.TagId)\n\n    @Html.Label("Select item")\n    @Html.DropDownList("ItemId")\n\n    <input type="submit" value="Save" />\n}\n\n<p>@Html.ActionLink("Back to list", "Index")</p>\n')),(0,i.kt)("p",null,"The above code should look familiar from the form we created to add new items with a one-to-many association with a category. In this case, we're providing a select list of items that a user can select from to associate an item with a tag in a many-to-many relationship."),(0,i.kt)("p",null,"Finally, let's finish up by adding a link to our new ",(0,i.kt)("inlineCode",{parentName:"p"},"AddItem")," route to our tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"Details.cshtml"),":"),(0,i.kt)("div",{class:"filename"},"Views/Tags/Details.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n<p>@Html.ActionLink("Add an Item", "AddItem", new { id = Model.TagId })</p>\n')),(0,i.kt)("p",null,"And with that, we can now create join relationships from the ",(0,i.kt)("inlineCode",{parentName:"p"},"TagsController"),". Up next, we'll add the same functionality to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsController"),"."),(0,i.kt)("h2",{id:"create-adding-addtag-actions-to-the-itemscontroller-and-corresponding-view"},"CREATE: Adding ",(0,i.kt)("inlineCode",{parentName:"h2"},"AddTag()")," Actions to the ",(0,i.kt)("inlineCode",{parentName:"h2"},"ItemsController")," and Corresponding View"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The process of adding the ability to create join relationships via our ",(0,i.kt)("inlineCode",{parentName:"p"},"Items")," controller and views will be  the same as doing this via the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tags")," controller and views, except different variable names and types. Because of this, we won't re-explain each update we make."),(0,i.kt)("p",null,"We'll start out by adding ",(0,i.kt)("inlineCode",{parentName:"p"},"AddTag()")," GET and POST actions to our ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemsController.cs"),":"),(0,i.kt)("div",{class:"filename"},"Controllers/ItemsController.cs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n\n    public ActionResult AddTag(int id)\n    {\n      Item thisItem = _db.Items.FirstOrDefault(items => items.ItemId == id);\n      ViewBag.TagId = new SelectList(_db.Tags, "TagId", "Title");\n      return View(thisItem);\n    }\n\n    [HttpPost]\n    public ActionResult AddTag(Item item, int tagId)\n    {\n      #nullable enable\n      ItemTag? joinEntity = _db.ItemTags.FirstOrDefault(join => (join.TagId == tagId && join.ItemId == item.ItemId));\n      #nullable disable\n      if (joinEntity == null && tagId != 0)\n      {\n        _db.ItemTags.Add(new ItemTag() { TagId = tagId, ItemId = item.ItemId });\n        _db.SaveChanges();\n      }\n      return RedirectToAction("Details", new { id = item.ItemId });\n    }  \n\n...\n')),(0,i.kt)("p",null,"Next, we'll add the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddTag.cshtml")," view. Go ahead and create this file now within the ",(0,i.kt)("inlineCode",{parentName:"p"},"Views/Items")," subdirectory and add the following code:"),(0,i.kt)("div",{class:"filename"},"Views/Items/AddTag.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'@{\n  Layout = "_Layout";\n}\n\n@model ToDoList.Models.Item\n\n<h2>Add a tag</h2>\n\n<h4>Add a tag to this item: @Html.DisplayFor(model => model.Description)</h4>\n\n@using (Html.BeginForm())\n{\n    @Html.HiddenFor(model => model.ItemId)\n\n    @Html.Label("Select tag")\n    @Html.DropDownList("TagId")\n\n    <input type="submit" value="Save" />\n}\n\n<p>@Html.ActionLink("Back to list", "Index")</p>\n')),(0,i.kt)("p",null,"Once again, let's finish up by adding a link to our new ",(0,i.kt)("inlineCode",{parentName:"p"},"AddTag")," route to our item's ",(0,i.kt)("inlineCode",{parentName:"p"},"Details.cshtml"),":"),(0,i.kt)("div",{class:"filename"},"Views/Items/Details.cshtml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'...\n<p>@Html.ActionLink("Add a Tag", "AddTag", new { id = Model.ItemId })</p>\n')),(0,i.kt)("p",null,"Now if we run our project, we'll be able to create and view tag objects as well as join relationships between tags and items."),(0,i.kt)("h3",{id:"repository-reference"},"Repository Reference"),(0,i.kt)("p",null,"Follow the link below to view how a sample version of the project should look at this point. Note that this is a link to a specific branch in the repository."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"https://github.com/epicodus-lessons/section-4-to-do-list-with-many-to-many-csharp-net6/tree/3_m2m_read_and_create"},(0,i.kt)("i",{class:"glyphicon glyphicon-folder-open"}),"  GitHub Repo for To Do List with EF Core Migrations and a Many-to-Many Relationship: 3","_","m2m","_","read","_","and","_","create"))))}p.isMDXComponent=!0}}]);